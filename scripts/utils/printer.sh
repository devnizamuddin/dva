#!/bin/bash

#* ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
#* ║                                   💰 Imported Files                                              ║
#* ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

source "$DVA_HOME/scripts/utils/style.sh"

#* ┏==================================================================================================┓
#* ┃                                   📖 Printing Header                                              ┃
#* ┗==================================================================================================┛

function print_header() {
    local title="$1"
    echo -e "${BOLD}${BLUE}┌───────────────────────────┐${NC}"
    echo -e "${BOLD}${BLUE}│   $title   │${NC}"
    echo -e "${BOLD}${BLUE}└───────────────────────────┘${NC}"
}

#* ┏==================================================================================================┓
#* ┃                                   📖 Printing Title                                              ┃
#* ┗==================================================================================================┛

function print_title() {
    local title="$1"
    echo -e "${BOLD}${GREEN}== $title ==${NC}"
}

#* ┏==================================================================================================┓
#* ┃                                         📖 Print Body                                            ┃
#* ┗==================================================================================================┛

function print_body() {
    echo -e "${WHITE}$1${NC}"
}


#* ┏==================================================================================================┓
#* ┃                                   📖 Choose Menu or Back                                         ┃
#* ┗==================================================================================================┛

function choose_menu_or_back() {
    echo -e "${YELLOW}1) Menu${NC}"
    echo -e "${YELLOW}2) Back${NC}"
}

#* ┏==================================================================================================┓
#* ┃                                 📖 Choose From Multiple Choice                                   ┃
#* ┗==================================================================================================┛

function choose_from_multiple_choice_options() {
    local -n options=$1  # Pass array by reference
    echo -e "${BOLD}Choose an option:${NC}"
    local i=1
    for opt in "${options[@]}"; do
        echo -e "${CYAN}$i)${NC} $opt"
        ((i++))
    done
}


#* ┏==================================================================================================┓
#* ┃                                   📖 Progress Dot Loader                                         ┃
#* ┗==================================================================================================┛


function show_progress_dots() {
    local message="${1}"
    shift
    local cmd=("$@")  # Command passed as arguments

    local delay=0.5
    local count=0

    # Hide cursor during animation
    tput civis
    echo ""
    echo ""

    # Start spinner in background
    (
    while :; do
        count=$(( (count + 1) % 4 ))
        dots=$(printf "%*s" "$count" | tr ' ' '.')
        printf "\r${CYAN}${BOLD}⏳ %s${dots}${RESET}" "$message"
        sleep "$delay"
    done
    ) &
    local spinner_pid=$!

    # Run the actual command silently
    "${cmd[@]}" >/dev/null 2>&1

    # Stop spinner
    kill "$spinner_pid" >/dev/null 2>&1
    wait "$spinner_pid" 2>/dev/null

    # Clean up output and print done message
    printf "\r${GREEN}✅ %s... Done!${RESET}\n" "$message"
    echo ""
    echo ""
    tput cnorm  # Show cursor again
}

#* ┏==================================================================================================┓
#* ┃                                   📖 Prints Line Gap                                             ┃
#* ┗==================================================================================================┛

function line_gap() {
    local lines=${1:-1}  # Default to 1 line if no argument given
    for ((i=0; i<lines; i++)); do
        echo -e ""
    done
}


#* ┏==================================================================================================┓
#* ┃                                   📖 Dividers                                                    ┃
#* ┗==================================================================================================┛


function divider() {
    
    echo -e "------------------------------------------------------------------------------------------------------------------------------"

}

function multi_line_divider() {
    
    echo -e "============================================================================================="

}
